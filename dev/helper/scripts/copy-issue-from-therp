#!/usr/bin/env python

import contextlib
import getopt
import json
import netrc
import os
import re
import requests
import ssl
import subprocess
import sys
import urllib2
import warnings

from pprint import pprint

import odoorpc


# get login details from netRC file
netrc_info = netrc.netrc()
auth_odoosunflower = netrc_info.authenticators('odoosunflower')
if not auth_odoosunflower:
  print "In your $HOME/.netrc file place:"
  print "machine odoosunflower login myuser password mypassword"
  sys.exit(0)
odoo_username, odoo_host, odoo_password = auth_odoosunflower
auth_odootherp = netrc_info.authenticators('odootherp')
if not auth_odootherp:
  print "In your $HOME/.netrc file place:"
  print "machine odootherp login myuser password mypassword"
  sys.exit(0)
therp_username, therp_host, therp_password = auth_odootherp

# create a context to connect without checking for https cert
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))

# connect to helpdesk.therp.nl
for i in range(5):
    try:
        therp_odoo = odoorpc.ODOO(
            'helpdesk.therp.nl',
            protocol='jsonrpc+ssl', port=443, opener=opener)
        therp_odoo.login(
            'odointprd10-helpdesk',
            therp_username, therp_password)
    except (ssl.SSLError, urllib2.URLError):
        continue

for i in range(5):
    try:
        sfit_odoo = odoorpc.ODOO(
            'sunflower.1systeem.nl',
            protocol='jsonrpc+ssl', port=443, opener=opener)
        sfit_odoo.login(
            'sunflowerdatabase',
            odoo_username, odoo_password)
    except (ssl.SSLError, urllib2.URLError):
        continue

therp_project_obj = therp_odoo.env['project.project']
therp_task_obj = therp_odoo.env['project.task']
therp_user_obj = therp_odoo.env['res.users']
therp_gj_user_id = therp_user_obj.search([
    ('login', '=', 'gj@sunflowerweb.nl')
], limit=1)
if not therp_gj_user_id:
    print 'GJ not found!'
    sys.exit(1)
therp_relevant_user_ids = [therp_odoo.env.uid]
therp_relevant_user_ids.append(therp_gj_user_id[0])
therp_relevant_users = therp_user_obj.read(therp_relevant_user_ids, ['name'])
print 'Relevant user ids Therp:'
pprint(therp_relevant_users)

# Therp project ids
therp_project_ids = [24, 54, 152, 187, 285, 291]

# Find relevant project stages
therp_stage_obj = therp_odoo.env['project.task.type']
stage_ids = therp_stage_obj.search([('name', 'in', [
    'Specification done',
    'Specificatie Klaar',
    'Development',
    'In Progress',
    'Ontwikkeling',
    'Analyse',
    'Ontwerp',
])])
stages = therp_stage_obj.read(stage_ids, ['name'])
print 'Stages Therp:'
pprint(stages)
if len(stage_ids) < 4:
    print 'Need at least three stages, maybe the names have changed?'
    sys.exit(1)

# Find relevant tasks
therp_task_ids = therp_task_obj.search([
    ('project_id', 'in', therp_project_ids),
    ('stage_id.state', 'not in', ['done', 'cancelled']),
    ('stage_id', 'in', stage_ids),
    ('user_id', 'in', therp_relevant_user_ids)
])

# Subtract tasks already imported
sfit_issue_obj = sfit_odoo.env['project.issue']
sfit_issue_ids = sfit_issue_obj.search([
    ('remote_id', 'in', therp_task_ids),
])
sfit_remote_ids = sfit_issue_obj.browse(sfit_issue_ids).read(['remote_id'])
sfit_remote_ids = [remote.get('remote_id') for remote in sfit_remote_ids]
tasks_to_sfit = set(therp_task_ids) - set(sfit_remote_ids)

# find id of our internal Therp project
sfit_project_obj = sfit_odoo.env['project.project']
therp_project_id = sfit_project_obj.search([
    ('name', 'ilike', '%Therp%')
])
if not therp_project_id:
    print "Therp project not found in SFIT Odoo"
    sys.exit(1)
therp_project_id = therp_project_id[0]
therp_account_id = sfit_project_obj.browse(therp_project_id).read([
    'analytic_account_id'
])[0]['analytic_account_id'][0]
print "Therp project found, id = {}, account = {}".format(
    therp_project_id, therp_account_id
)

# List of tasks to import from Therp  
print 'tasks to be copied from Therp:'
pprint(list(tasks_to_sfit))
therp_task_info = therp_task_obj.browse(tasks_to_sfit).read([
    'code', 'name', 'description', 'project_id'
])

for remote in therp_task_info:
    print '.',
    new_issue = sfit_issue_obj.create({
        'name': u'Therp #{} {}'.format(remote['code'], remote['name']),
        'description': remote['description'],
        'remote_id': remote['id'],
        'project_id': therp_project_id,
        'analytic_account_id': therp_account_id,
        'remote_project_id': remote['project_id']
    })
print
