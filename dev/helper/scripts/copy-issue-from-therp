#!/usr/bin/env python

import contextlib
import odoorpc
import netrc
import os
import requests
import ssl
import subprocess
import sys
import urllib2
import warnings
import getopt
import re
import requests
import pprint
import json


# get login details from netRC file
netrc_info = netrc.netrc()
auth_odoosunflower = netrc_info.authenticators('odoosunflower')
if not auth_odoosunflower:
  print "In your $HOME/.netrc file place:"
  print "machine odoosunflower login myuser password mypassword"
  sys.exit(0)
odoo_username, odoo_host, odoo_password = auth_odoosunflower
auth_odootherp = netrc_info.authenticators('odootherp')
if not auth_odootherp:
  print "In your $HOME/.netrc file place:"
  print "machine odootherp login myuser password mypassword"
  sys.exit(0)
therp_username, therp_host, therp_password = auth_odootherp

# create a context to connect without checking for https cert
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))

# connect to helpdesk.therp.nl
for i in range(5):
    try:
        therp_odoo = odoorpc.ODOO(
            'helpdesk.therp.nl',
            protocol='jsonrpc+ssl', port=443, opener=opener)
        therp_odoo.login(
            'odointprd10-helpdesk',
            therp_username, therp_password)
    except (ssl.SSLError, urllib2.URLError):
        continue

for i in range(5):
    try:
        sfit_odoo = odoorpc.ODOO(
            'sunflower.1systeem.nl',
            protocol='jsonrpc+ssl', port=443, opener=opener)
        sfit_odoo.login(
            'sunflowerdatabase',
            odoo_username, odoo_password)
    except (ssl.SSLError, urllib2.URLError):
        continue

therp_project_obj = therp_odoo.env['project.project']
therp_task_obj = therp_odoo.env['project.task']
therp_gj_user_id = therp_odoo.env['res.users'].search([
    ('login', '=', 'gj@sunflowerweb.nl')
], limit=1)
therp_relevant_user_ids = [therp_odoo.env.uid]
if therp_gj_user_id:
    therp_relevant_user_ids.append(therp_gj_user_id[0])
print 'Relevant user ids Therp: {}'.format(therp_relevant_user_ids)

sfit_issue_obj = sfit_odoo.env['project.issue']
sfit_project_obj = sfit_odoo.env['project.project']

# Check for relevant tasks at Therp
therp_project_ids = therp_project_obj.search([
    '|',
    ('name', 'ilike', 'Regio%'),
    ('name', 'ilike', 'SV%')
])
therp_task_ids = therp_task_obj.search([
    ('project_id', 'in', therp_project_ids),
    ('stage_id.state', 'not in', ['done', 'cancelled']),
    ('user_id', 'in', therp_relevant_user_ids)
])

# Subtract tasks already imported
sfit_issue_ids = sfit_issue_obj.search([
    ('remote_id', 'in', therp_task_ids),
])
sfit_remote_ids = sfit_issue_obj.browse(sfit_issue_ids).read(['remote_id'])
sfit_remote_ids = [remote.get('remote_id') for remote in sfit_remote_ids]
tasks_to_sfit = set(therp_task_ids) - set(sfit_remote_ids)

# find id of our internal Therp project
therp_project_id = sfit_project_obj.search([
    ('name', 'ilike', '%Therp%')
])
if not therp_project_id:
    print "Therp project not found in SFIT Odoo"
    sys.exit(1)
therp_project_id = therp_project_id[0]
therp_account_id = sfit_project_obj.browse(therp_project_id).read([
    'analytic_account_id'
])[0]['analytic_account_id'][0]
print "Therp project found, id = {}, account = {}".format(
    therp_project_id, therp_account_id
)

# List of tasks to import from Therp  
print 'tasks to be copied from Therp:'
pprint.pprint(list(tasks_to_sfit))
therp_task_info = therp_task_obj.browse(tasks_to_sfit).read([
    'name', 'description', 'project_id'
])

print 'Therp',
for remote in therp_task_info:
    print '.',
    new_issue = sfit_issue_obj.create({
        'name': u'Therp #{} {}'.format(remote['id'], remote['name']),
        'description': remote['description'],
        'remote_id': remote['id'],
        'project_id': therp_project_id,
        'analytic_account_id': therp_account_id,
        'remote_project_id': remote['project_id']
    })
print
