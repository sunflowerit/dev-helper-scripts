#!/usr/bin/env python

import argparse
import contextlib
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
import getopt
import json
import netrc
import odoorpc
import os
from pprint import pprint
import re
import requests
import ssl
import subprocess
import sys
from togglwrapper import Toggl
import urllib2
import warnings

# get login details from netRC file
netrc_info = netrc.netrc()
auth_odoosunflower = netrc_info.authenticators('odoosunflower')
if not auth_odoosunflower:
  print "In your $HOME/.netrc file place:"
  print "machine odoosunflower login myuser password mypassword"
  sys.exit(0)
odoo_username, odoo_host, odoo_password = auth_odoosunflower
auth_odootherp = netrc_info.authenticators('odootherp')
if not auth_odootherp:
  print "In your $HOME/.netrc file place:"
  print "machine odootherp login myuser password mypassword"
  sys.exit(0)
therp_username, therp_host, therp_password = auth_odootherp

# create a context to connect without checking for https cert
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))

# connect to Therp Odoo
therp_odoo = odoorpc.ODOO('helpdesk.therp.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
therp_odoo.login('odointprd80-helpdesk', therp_username, therp_password)

# connect to our Odoo
sfit_odoo = odoorpc.ODOO('sunflower.1systeem.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
sfit_odoo.login('odoo_sunflower', odoo_username, odoo_password)

# find id of Therp project
project_obj = sfit_odoo.env['project.project']
therp_project_id = project_obj.search(
    [('name', 'ilike', '%Therp%')])
if not therp_project_id:
  print "Therp project not found in SFIT Odoo"
  sys.exit(1)
therp_project_id = therp_project_id[0]
therp_project = project_obj.browse(therp_project_id)
therp_account_id = therp_project.analytic_account_id.id
print "Therp project found, id = {}".format(therp_project_id)
print "Analytic account id = {}".format(therp_account_id)

# get hours on Therp project
first_day_of_current_month = date.today().replace(day=1)
date_start = first_day_of_current_month - relativedelta(months=1)
date_end = first_day_of_current_month - timedelta(days=1)
date_start_str = date_start.strftime('%Y-%m-%d')
date_end_str = date_end.strftime('%Y-%m-%d')
print "Therp hours between {:%d %b %Y} - {:%d %b %Y}".format(
	date_start, date_end)
if 'hr.analytic.timesheet' in sfit_odoo.env:
	hours_obj = sfit_odoo.env['hr.analytic.timesheet']
	hours_domain = [
	    ('account_id', '=', therp_account_id),
	    ('date', '>=', date_start_str),
	    ('date', '<=', date_end_str)
	]
	hours_ids = hours_obj.search(hours_domain, order='date asc')
issue_obj = sfit_odoo.env['project.issue']
if hours_ids:
	hours = hours_obj.browse(hours_ids).read(['date', 'issue_id', 'name', 'user_id', 'unit_amount'])
	for hour in hours:
		hour['remote_issue_id'] = None
		issue_id = hour['issue_id']
		if issue_id:
			issue_info = issue_obj.browse(issue_id[0]).read(['remote_id'])
			remote_id = issue_info[0]['remote_id']
			if remote_id:
				hour['remote_issue_id'] = remote_id
	hours_readable = ['{}-{}-{}-{}'.format(
		a['date'], a['unit_amount'], a['name'], a['user_id'][1])
		for a in hours]	
	print("\n".join(hours_readable))
	hours_total = sum([a['unit_amount'] for a in hours])
	print "TOTAL: {}".format(hours_total)

# find id of VWN project
account_obj = therp_odoo.env['account.account']
vwn_account_id = 80  # Revenue SV Oost
print "VWN analytic account found, id = {}".format(vwn_account_id)

# find if we already put hours there
therp_hours_obj = therp_odoo.env['hr.analytic.timesheet']
therp_hours_domain = [
    ('account_id', '=', vwn_account_id),
    ('date', '>=', date_start_str),
    ('date', '<=', date_end_str)
]
therp_hours_ids = therp_hours_obj.search(therp_hours_domain)
if therp_hours_ids:
	print "Already have {} hour lines for this month".format(len(therp_hours_ids))
	sys.exit(1)

# Store 
for hour in hours:
	hour_data = {
		'date': hour['date'],
		'unit_amount': hour['unit_amount'],
		'issue_id': hour['remote_issue_id'],
		'user_id': therp_odoo.env.uid,
		'account_id': vwn_account_id,
		'journal_id': 6,
		'to_invoice': 1,
		'name': '{} ({})'.format(hour['name'], hour['user_id'][1])
	}
	therp_hours_obj.create(hour_data)

print "Hours copied! Check your work at https://helpdesk.therp.nl/web#page=0&limit=80&view_type=list&model=hr.analytic.timesheet&action=479"




