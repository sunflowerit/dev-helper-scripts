#!/usr/bin/env python

import argparse
import contextlib
from datetime import date, timedelta
from dateutil.relativedelta import relativedelta
import getopt
import json
import math
import netrc
import odoorpc
import os
from pprint import pprint
import re
import requests
import ssl
import subprocess
import sys
import time
from togglwrapper import Toggl
import urllib2
import warnings

# get login details from netRC file
netrc_info = netrc.netrc()
auth_odoosunflower = netrc_info.authenticators('odoosunflower')
if not auth_odoosunflower:
    print "In your $HOME/.netrc file place:"
    print "machine odoosunflower login myuser password mypassword"
    sys.exit(0)
odoo_username, odoo_host, odoo_password = auth_odoosunflower
auth_odootherp = netrc_info.authenticators('odootherp')
if not auth_odootherp:
    print "In your $HOME/.netrc file place:"
    print "machine odootherp login myuser password mypassword"
    sys.exit(0)
therp_username, therp_host, therp_password = auth_odootherp

# create a context to connect without checking for https cert
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))

# connect to our Odoo
sfit_odoo = odoorpc.ODOO('sunflower.1systeem.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
sfit_odoo.login('odoo_sunflower', odoo_username, odoo_password)

# find id of Therp project
project_obj = sfit_odoo.env['project.project']
therp_project_ids = project_obj.search(
    [('name', 'ilike', '%Therp%')])
if not therp_project_ids:
    print "Therp project not found in SFIT Odoo"
    sys.exit(1)
therp_project_id = therp_project_ids[0]
therp_project_read = project_obj.browse(therp_project_id).read(
    ['analytic_account_id'])[0]
therp_account_id = therp_project_read['analytic_account_id'][0]
print "Therp project found, id = {}".format(therp_project_id)
print "Analytic account id = {}".format(therp_account_id)

# get hours on Therp project
first_day_of_current_month = (date.today() + relativedelta(days=7)).replace(day=1)
date_start = first_day_of_current_month - relativedelta(months=1)
date_end = first_day_of_current_month - timedelta(days=1)
date_start_str = date_start.strftime('%Y-%m-%d')
date_end_str = date_end.strftime('%Y-%m-%d')
print "Therp hours between {:%d %b %Y} - {:%d %b %Y}".format(
    date_start, date_end)
try:
    hours_obj = sfit_odoo.env['hr.analytic.timesheet']
    issue_obj = sfit_odoo.env['project.issue']
except KeyError:
    print "Required objects not found on SFIT instance."
    sys.exit(1)
hours_domain = [
    ('account_id', '=', therp_account_id),
    ('date', '>=', date_start_str),
    ('date', '<=', date_end_str)
]
hours_ids = hours_obj.search(hours_domain, order='date asc')
if not hours_ids:
    print "No hours found for this month."
    sys.exit(0)
hours = hours_obj.browse(hours_ids)
hours_read = hours.read(['date', 'issue_id', 'name', 'user_id', 'unit_amount'])
hours_readable = ['{}-{}-{}-{}'.format(
    a['date'], a['unit_amount'], a['name'], a['user_id'][1])
    for a in hours_read]
print("\n".join(hours_readable))
hours_total = sum([a.unit_amount for a in hours])
print "TOTAL: {}".format(hours_total)

# Getting issue information
issue_ids = [hour.get('issue_id', [None])[0] for hour in hours_read if hour]
remote_ids = issue_obj.browse(issue_ids).read(['remote_id'])
issue_trans = dict((r['id'], r['remote_id'] or r['remote_id']) for r in remote_ids)

print "issue_ids", issue_ids
print "remote_ids",remote_ids
# connect to Therp Odoo
therp_odoo = odoorpc.ODOO('helpdesk.therp.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
therp_odoo.login('odointprd80-helpdesk', therp_username, therp_password)

therp_issue_obj = therp_odoo.env['project.issue']
therp_project_obj = therp_odoo.env['project.project']
therp_hours_obj = therp_odoo.env['hr.analytic.timesheet']

# get our projects id on the Therp ,'state' = 'open'
project_ids = therp_project_obj.search([('state', '=', 'open')])
# get the 'remote_ids'
remote_issue_ids = [issue_trans.get(issue_id) for issue_id in issue_ids]
# get Therp issue_id belong to sunfloweit and thier project_id
therp_remote_ids = therp_issue_obj.search([('id','in',remote_issue_ids),('project_id','in',project_ids)])
issue_project_id = therp_issue_obj.browse(therp_remote_ids).read(['project_id'])
# get the account_analytic_id for each project_id
account_id = therp_project_obj.read(project_ids, ['analytic_account_id'])

# [dict] return the project_id for 'issue_id'
project_issue_trans = dict((r['id'], r['project_id'][0] or r['id']) for r in issue_project_id)
# [dict ] retuen the analytic_account_id for project_id
project_analytic_trans = dict((r['id'], r['analytic_account_id'][0] or r['id']) for r in account_id)

hour_data = []
print 'Collecting information on hours to copy...'
therp_user_id = therp_odoo.env.uid
for hour in hours_read:
    user_name = hour['user_id'][1]
    amount = hour['unit_amount']
    issue_id = hour['issue_id'][0]
    remote_id = issue_trans.get(issue_id, False)
    project_id = project_issue_trans.get(remote_id,False)
    project_analytic_account_id = project_analytic_trans.get(project_id,False)
    therp_hours_domain = [
    ('account_id', '=', project_analytic_account_id),
    ('date', '>=', date_start_str),
    ('date', '<=', date_end_str)
    ] 
    therp_hours_ids = therp_hours_obj.search(therp_hours_domain)
    if therp_hours_ids:
        sys.stdout.write("Found. Deleting...")
        sys.stdout.flush()
        therp_hours_obj.unlink(therp_hours_ids)
        print 'Done'
    if "Dan" in user_name or "Terrence" in user_name:
        amount = math.ceil(amount * 0.5 * 4.0) * 0.25
    hour_data.append({
        'date': hour['date'],
        'unit_amount': amount,
        'issue_id': remote_id,
        'user_id': therp_user_id,
        'account_id': project_analytic_account_id,
        'journal_id': 6,
        'to_invoice': 1,
        'name': '{} ({})'.format(hour['name'], user_name)
    })

# print 'Creating hour records at Therp...'
for record in hour_data:
    sys.stdout.write('.')
    sys.stdout.flush()
    therp_hours_obj.create(record)

print "Hours copied! Check your work at https://helpdesk.therp.nl/web#page=0&limit=80&view_type=list&model=hr.analytic.timesheet&action=479"
