#!/bin/bash

# getopt test
getopt --test > /dev/null
if [[ $? -ne 4 ]]; then
    echo "Iâ€™m sorry, `getopt --test` failed in this environment."
    exit 1
fi

# requirements tests
if [ -d "../../../parts" ]; then
  basedir=../../..
  moduledir=.
  module=${PWD##*/}
elif [ -d "../../../../parts" ]; then
  basedir=../../../..
  moduledir=..
  pushd ..
  module=${PWD##*/}
  popd
else
  echo "You have to run this from within a parts/xxxxx/yyyyy (module) folder"
  exit
fi
files=$(ls $moduledir/tests/test*.py)
if [ -z "$files" ]; then
  echo "This module does not have any Python unit tests to call."
  exit
fi

# function to get stuff from odoo.cfg
odoocfgparm=
get_parm_from_odoocfg() {
  odoocfgparm=$(cat $basedir/etc/odoo.cfg |grep $1 | sed -nr 's/^.*=\s//p' | awk '{$1=$1};1')
}

# choose database
get_parm_from_odoocfg db_name && db_name="$odoocfgparm"
get_parm_from_odoocfg db_password && db_password="$odoocfgparm"
get_parm_from_odoocfg db_user && db_username="$odoocfgparm"
get_parm_from_odoocfg dbfilter && dbfilter="$odoocfgparm"

# parse command line options
withcoverage="yes"
databaseparm=
db_name=
OPTIONS=cd:
PARSED=$(getopt --options=$OPTIONS --name "$0" -- "$@")
if [[ $? -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"
while true; do
    case "$1" in
        -d)
            databaseparm="-d $2"
            db_name="$2"
            shift 2
            ;;
        -c)
            withcoverage="no"
            shift 1
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error."
            exit 3
    esac
done

# choose database
if [ -z "$databaseparm" ]; then
  IFS="
"
  whereclause="where datname ilike '%demo%'"
  DBLIST=$(PGPASSWORD="$db_password" psql -t -c "select datname from pg_database $whereclause" postgres -h localhost -U "$db_username")
  DBGUESS=$(echo "$DBLIST" | sed 's/^ *//;s/ *$//' | grep -e "$dbfilter")
  DBCOUNT=$(echo "$DBGUESS" | wc -l)
  if [ "$DBCOUNT" == "1" ]; then
    databaseparm="-d $DBGUESS"
    db_name="$DBGUESS"
  elif [ "$DBCOUNT" == "0" ]; then
    echo "No databases found!"
    exit
  else
    echo "Run this on a database with demo data."
    echo "Eg. 'test-module -d ${db_name}_demo'"
    echo "NOTE: this database needs to have the module installed!"
    echo "Databases to choose from:"
    echo $DBGUESS
    exit
  fi
fi

# Test whether module is installed
installed=$(PGPASSWORD="$db_password" psql -t $db_name -h localhost -U "$db_username" -c "select count(id) from ir_module_module where name = '$module' and state = 'installed';")
if [ $installed -ne 1 ]; then
  echo Module $module not installed in database $db_name!
  exit
fi

# run all tests
odoo=$basedir/bin/start_odoo
if [ ! -x "$odoo" ]; then
  echo Script not found: $odoo. Cannot run tests.
  exit
fi
odooparms=(--workers=0 --log-level=test --xmlrpc-port=18079 --stop-after-init)
for file in $files
do
  fullpath="$(pwd)/$file"
  if [ "$withcoverage" == "yes" ]; then
    set -x
    coverage run --source . --rcfile=$basedir/.coveragerc $odoo $databaseparm "${odooparms[@]}" --test-file $fullpath
  else
    set -x
    $odoo $databaseparm "${odooparms[@]}" --test-file $fullpath
  fi
done
if [ "$withcoverage" == "yes" ]; then
  coverage report
fi

