#!/usr/bin/env python

import contextlib
import odoorpc
import netrc
import os
import requests
import ssl
import subprocess
import sys
import urllib2
import warnings
import getopt
import re
import requests
from togglwrapper import Toggl
import pprint
import json


# get login details from netRC file
netrc_info = netrc.netrc()
auth_odoosunflower = netrc_info.authenticators('odoosunflower')
if not auth_odoosunflower:
  print "In your $HOME/.netrc file place:"
  print "machine odoosunflower login myuser password mypassword"
  sys.exit(0)
odoo_username, odoo_host, odoo_password = auth_odoosunflower
auth_odootherp = netrc_info.authenticators('odootherp')
if not auth_odootherp:
  print "In your $HOME/.netrc file place:"
  print "machine odootherp login myuser password mypassword"
  sys.exit(0)
therp_username, therp_host, therp_password = auth_odootherp
auth_odooscrum = netrc_info.authenticators('odooscrum')
if not auth_odooscrum:
  print "In your $HOME/.netrc file place:"
  print "machine odooscrum login myuser password mypassword"
  sys.exit(0)
scrum_username, scrum_host, scrum_password = auth_odooscrum

# create a context to connect without checking for https cert
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ctx))

# connect to Therp Odoo
therp_odoo = odoorpc.ODOO('helpdesk.therp.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
therp_odoo.login('odointprd80-helpdesk', therp_username, therp_password)
therp_project_obj = therp_odoo.env['project.project']
therp_issue_obj = therp_odoo.env['project.issue']
therp_gj_user_id = therp_odoo.env['res.users'].search([
    ('login', '=', 'gj@sunflowerweb.nl')
], limit=1)
therp_relevant_user_ids = [therp_odoo.env.uid]
if therp_gj_user_id:
    therp_relevant_user_ids.append(therp_gj_user_id[0])
print 'Relevant user ids Therp: {}'.format(therp_relevant_user_ids)

# connect to Scrum Odoo
scrum_odoo = odoorpc.ODOO('scrum.therp.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
scrum_odoo.login('odoextscr80', scrum_username, scrum_password)
scrum_project_obj = scrum_odoo.env['project.project']
scrum_task_obj = scrum_odoo.env['project.task']
scrum_gj_user_id = scrum_odoo.env['res.users'].search([
    ('login', '=', 'gj@sunflowerweb.nl')
], limit=1)
scrum_relevant_user_ids = [scrum_odoo.env.uid]
if scrum_gj_user_id:
    scrum_relevant_user_ids.append(scrum_gj_user_id[0])
print 'Relevant user ids Scrum: {}'.format(scrum_relevant_user_ids)

# connect to our Odoo
sfit_odoo = odoorpc.ODOO('sunflower.1systeem.nl',
    protocol='jsonrpc+ssl', port=443, opener=opener)
sfit_odoo.login('odoo_sunflower', odoo_username, odoo_password)
sfit_issue_obj = sfit_odoo.env['project.issue']
sfit_project_obj = sfit_odoo.env['project.project']

# Check for relevant issues at Therp
therp_project_ids = therp_project_obj.search([
    ('state', '=', 'open'),
    ('name', 'ilike', 'SV%')
])
therp_issue_ids = therp_issue_obj.search([
    ('project_id','in',therp_project_ids),
    ('stage_id.state', 'not in', ['done', 'cancelled']),
    ('user_id', 'in', therp_relevant_user_ids)
])

# Check for relevant tasks at Scrum
scrum_project_ids = scrum_project_obj.search([
    ('state', '=', 'open'),
    ('name', 'ilike', 'Regio%')
])
scrum_task_ids = scrum_task_obj.search([
    ('project_id', 'in', scrum_project_ids),
    ('stage_id.name', 'not in', ['Verwerkt', 'Geannuleerd']),
    ('user_id', '=', scrum_relevant_user_ids)
])

# Subtract issues and tasks already imported
sfit_issue_ids = sfit_issue_obj.search([
    ('remote_id', 'in', therp_issue_ids + scrum_task_ids)
])
sfit_remote_ids = sfit_issue_obj.browse(sfit_issue_ids).read(['remote_id'])
sfit_remote_ids = [remote.get('remote_id') for remote in sfit_remote_ids ]
issues_to_sfit = set(therp_issue_ids) - set(sfit_remote_ids)
tasks_to_sfit = set(scrum_task_ids) - set(sfit_remote_ids)

# find id of our internal Therp project
therp_project_id = sfit_project_obj.search([
    ('name', 'ilike', '%Therp%')
])
if not therp_project_id:
    print "Therp project not found in SFIT Odoo"
    sys.exit(1)
therp_project_id = therp_project_id[0]
therp_account_id = sfit_project_obj.browse(therp_project_id).read([
    'analytic_account_id'
])[0]['analytic_account_id'][0]
print "Therp project found, id = {}, account = {}".format(
    therp_project_id, therp_account_id
)

# List of issues to import from Therp  
print 'issues to be copied from Therp:'
pprint.pprint(list(issues_to_sfit))
therp_issue_info = therp_issue_obj.browse(issues_to_sfit).read([
    'name', 'description', 'project_id'
])

# list of tasks to import from scrum
print 'tasks to be copied from scrum:'
pprint.pprint(list(tasks_to_sfit))
scrum_task_info = scrum_task_obj.browse(tasks_to_sfit).read([
    'name', 'description', 'project_id'
])

# Import issues from Therp
therp_issue_info = therp_issue_obj.browse(issues_to_sfit).read([
    'name', 'description', 'project_id'
])
print 'Therp',
for remote in therp_issue_info:
    print '.',
    new_issue = sfit_issue_obj.create({
        'name': u'Therp #{} {}'.format(remote['id'], remote['name']),
        'description': remote['description'],
        'remote_id': remote['id'],
        'project_id': therp_project_id,
        'remote_project_id': remote['project_id']
    })
print

# Import tasks from Scrum
print 'Scrum',
for remote in scrum_task_info:
    print '.',
    new_issue = sfit_issue_obj.create({
        'name': u'Scrum #{} {}'.format(remote['id'], remote['name']),
        'description': remote['description'],
        'remote_id': remote['id'],
        'project_id': therp_project_id,
        'analytic_account_id': therp_account_id,
        'remote_project_id': remote['project_id']
    })
print

